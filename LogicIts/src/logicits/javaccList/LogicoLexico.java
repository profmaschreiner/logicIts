package logicits.javaccList;

/* LogicoLexico.java */
 /* Generated By:JJTree&JavaCC: Do not edit this line. LogicoLexico.java */
import java.io.*;
import java.util.*;

public class LogicoLexico/*@bgen(jjtree)*/ implements LogicoLexicoTreeConstants, LogicoLexicoConstants {/*@bgen(jjtree)*/
    protected static JJTLogicoLexicoState jjtree = new JJTLogicoLexicoState();

    public static void main(String[] args) throws ParseException {
        List<String> lista = new ArrayList();
        try {
            LogicoLexico analizador = new LogicoLexico(System.in);
            lista = analizador.program();
            //for(int i=0;i<lista.size();i++){
            //  System.out.println(lista.get(i));  
            //}
        } catch (ParseException e) {
            lista.clear();
            lista.add("Errro");
            lista.add(e.getMessage());
            System.out.println(e.getMessage());
            System.out.println("Erro na analize!!!");
        }
        for (int i = 0; i < lista.size(); i++) {
            System.out.println(lista.get(i));
        }
    }

    static final public List<String> program() throws ParseException {/*@bgen(jjtree) program */
        ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        List<String> listaDeTokens = new ArrayList<String>();
        try {
            Expressao(listaDeTokens);
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if ("" != null) {
                    return listaDeTokens;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final public void Expressao(List<String> listaDeTokens) throws ParseException {
        Termo(listaDeTokens);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case E:
            case OU:
            case BIIMPLICA:
            case IMPLICA: {
                ComplementoDeExpressao(listaDeTokens);
                break;
            }
            default:
                jj_la1[0] = jj_gen;
                ;
        }
    }

    static final public void ComplementoDeExpressao(List<String> listaDeTokens) throws ParseException {
        Operador(listaDeTokens);
        Expressao(listaDeTokens);
    }

    static final public void Termo(List<String> listaDeTokens) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case NEGACAO: {
                Negacao(listaDeTokens);
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        TermoSimples(listaDeTokens);
    }

    static final public void TermoSimples(List<String> listaDeTokens) throws ParseException {
        Token t1, t2;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case VARIAVEL: {
                VariavelSimples(listaDeTokens);
                break;
            }
            case ABREPARENT: {
                ExpEntreParent(listaDeTokens);
                break;
            }
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void ExpEntreParent(List<String> listaDeTokens) throws ParseException {
        Token t1, t2;
        t1 = jj_consume_token(ABREPARENT);
        listaDeTokens.add(t1.image);
        Expressao(listaDeTokens);
        t2 = jj_consume_token(FECHAPARENT);
        listaDeTokens.add(t2.image);
    }

    static final public void VariavelSimples(List<String> listaDeTokens) throws ParseException {
        Token t1;
        t1 = jj_consume_token(VARIAVEL);
        listaDeTokens.add(t1.image);
    }

    static final public void Negacao(List<String> listaDeTokens) throws ParseException {
        Token t1;
        t1 = jj_consume_token(NEGACAO);
        listaDeTokens.add(t1.image);
    }

    static final public void Operador(List<String> listaDeTokens) throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case E: {
                t = jj_consume_token(E);
                listaDeTokens.add(t.image);
                break;
            }
            case OU: {
                t = jj_consume_token(OU);
                listaDeTokens.add(t.image);
                break;
            }
            case BIIMPLICA: {
                t = jj_consume_token(BIIMPLICA);
                listaDeTokens.add(t.image);
                break;
            }
            case IMPLICA: {
                t = jj_consume_token(IMPLICA);
                listaDeTokens.add(t.image);
                break;
            }
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static private boolean jj_initialized_once = false;
    /**
     * Generated Token Manager.
     */
    static public LogicoLexicoTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[4];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x198, 0x20, 0x42, 0x198,};
    }

    /**
     * Constructor with InputStream.
     */
    public LogicoLexico(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public LogicoLexico(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new LogicoLexicoTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public LogicoLexico(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new LogicoLexicoTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public LogicoLexico(LogicoLexicoTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(LogicoLexicoTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 4; i++) {
            jj_la1[i] = -1;
        }
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    static private int jj_ntk_f() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[13];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 4; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 13; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

}
